package com.my.board.dao;

import java.util.List;

import org.springframework.data.jdbc.repository.query.Modifying;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

import com.my.board.entity.BoardEntity;
import com.my.board.entity.ReplyEntity;
import com.my.exception.AddException;
import com.my.exception.FindException;
import com.my.exception.ModifyException;
import com.my.exception.RemoveException;

public interface BoardRepository extends JpaRepository<BoardEntity, Integer>{
	/**
	 * 게시글 목록을 검색한다
	 * @return 게시글 목록
	 * @throws FindException
	 */
	@Query(value="SELECT b.*,\r\n"
			+ "		(SELECT COUNT(*) FROM board_reply2 WHERE reply_board_no=b.board_no)replycnt\r\n"
			+ "		FROM board2 b\r\n"
			+ "		ORDER BY board_no DESC", nativeQuery = true)
	public List<BoardEntity> selectAll() throws FindException;
	
	
	@Query(value="SELECT *\r\n"
			+ "		FROM board2 b LEFT JOIN\r\n"
			+ "		(SELECT level,r1.* FROM\r\n"
			+ "		board_reply2 r1 START WITH reply_parent_no IS NULL\r\n"
			+ "		CONNECT BY PRIOR\r\n"
			+ "		reply_no = reply_parent_no\r\n"
			+ "		ORDER SIBLINGS BY reply_no DESC)r\r\n"
			+ "		ON\r\n"
			+ "		b.board_no = r.reply_board_no\r\n"
			+ "		WHERE board_no = :boardNo", nativeQuery = true)
	public BoardEntity selectByBoardNo(int boardNo) throws FindException;
	
	@Modifying
	@Transactional
	@Query(value="INSERT INTO board2(board_no, board_title, board_content, board_id)\r\n"
			+ "		VALUES (board_seq2.NEXTVAL, :#{#board.boardTitle}, :#{#board.boardContent}, :#{#board.boardId})", nativeQuery = true)
	public void insertBoard(BoardEntity board) throws AddException;
	
	@Modifying
	@Query(value="UPDATE board2\r\n"
			+ "		SET board_content = :#{#board.boardContent}\r\n"
			+ "		WHERE board_no = :#{#board.boardNo} AND board_id = :#{#board.boardId}"
			, nativeQuery = true)	
	public void updateBoard(BoardEntity board) throws ModifyException;
	
	@Modifying
	@Query(value="DELETE FROM board2\r\n"
			+ "		WHERE board_no = :boardNo"
			, nativeQuery = true)
	public void deleteBoard(int boardNo) throws RemoveException;
	
	@Modifying
	@Query(value="INSERT INTO board_reply2(reply_no, reply_board_no, reply_parent_no, reply_content,reply_id)\r\n"
			+ "		VALUES (reply_seq2.NEXTVAL, :#{#reply.replyBoardNo}, :#{#reply.replyParentNo}, :#{#reply.replyContent}, :#{#reply.replyId})"
			, nativeQuery = true)
	public void insertReply(ReplyEntity reply) throws AddException;
	
	@Modifying
	@Query(value="UPDATE board_reply2\r\n"
			+ "		SET reply_content=:replyContent\r\n"
			+ "		WHERE reply_no=:replyNo"
			, nativeQuery = true)
	public void updateReply(ReplyEntity reply) throws ModifyException;
	
	@Modifying
	@Query(value="DELETE board_reply2\r\n"
			+ "		WHERE reply_no=:replyNo"
			, nativeQuery = true)
	public void deleteReply(int replyNo) throws RemoveException;
	
}